// <auto-generated />
using System;
using Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Data.Migrations
{
    [DbContext(typeof(MainDb))]
    partial class MainDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Data.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AppUsers", (string)null);
                });

            modelBuilder.Entity("Data.Models.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("BoughtFor")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ContractId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("CurrentPrice")
                        .HasColumnType("numeric");

                    b.Property<string>("Goal")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("InterestOnCurrentDeposit")
                        .HasColumnType("numeric");

                    b.Property<int?>("InvestmentIdeaId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("Market")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int?>("SeasonalityId")
                        .HasColumnType("integer");

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.Property<decimal?>("SoldFor")
                        .HasColumnType("numeric");

                    b.Property<int?>("StrategyId")
                        .HasColumnType("integer");

                    b.Property<int>("Term")
                        .HasColumnType("integer");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("InvestmentIdeaId");

                    b.HasIndex("SeasonalityId");

                    b.HasIndex("StrategyId");

                    b.ToTable("Assets", (string)null);
                });

            modelBuilder.Entity("Data.Models.AssetHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("numeric");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("AssetHistory", (string)null);
                });

            modelBuilder.Entity("Data.Models.BalanceFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("text");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("BalanceFlows", (string)null);
                });

            modelBuilder.Entity("Data.Models.Chart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<int?>("PositionEntryNoteId")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<DateTime>("UploadedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PositionEntryNoteId");

                    b.ToTable("Charts", (string)null);
                });

            modelBuilder.Entity("Data.Models.CryptoMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("FinanceDataId")
                        .HasColumnType("integer");

                    b.Property<decimal>("MarketCap")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("Volume")
                        .HasColumnType("numeric");

                    b.Property<decimal>("YearHigh")
                        .HasColumnType("numeric");

                    b.Property<decimal>("YearLow")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FinanceDataId")
                        .IsUnique();

                    b.ToTable("CryptoMetrics", (string)null);
                });

            modelBuilder.Entity("Data.Models.Diversification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MinimumAssetsPerNiche")
                        .HasColumnType("integer");

                    b.Property<decimal>("NichePercentage")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("RiskManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RiskManagementId");

                    b.ToTable("Diversifications", (string)null);
                });

            modelBuilder.Entity("Data.Models.FinanceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int?>("StrategyId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StrategyId");

                    b.ToTable("FinanceData", (string)null);
                });

            modelBuilder.Entity("Data.Models.Futures", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HedgeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HedgeId");

                    b.ToTable("Futures");
                });

            modelBuilder.Entity("Data.Models.Hedge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Hedges", (string)null);
                });

            modelBuilder.Entity("Data.Models.InvestmentIdea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("ExpectedReturn")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal?>("Profit")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("InvestmentIdeas", (string)null);
                });

            modelBuilder.Entity("Data.Models.MacroeconomicAnalysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EconomicType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("MacroeconomicAnalyses", (string)null);
                });

            modelBuilder.Entity("Data.Models.MacroeconomicEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MacroeconomicAnalysisId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MacroeconomicAnalysisId");

                    b.ToTable("MacroeconomicEvents", (string)null);
                });

            modelBuilder.Entity("Data.Models.Option", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HedgeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HedgeId");

                    b.ToTable("Option");
                });

            modelBuilder.Entity("Data.Models.PositionEntryNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AssetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("PositionEntryNotes", (string)null);
                });

            modelBuilder.Entity("Data.Models.PositionManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AverageLevel")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<string>("Rules")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("PositionEntries", (string)null);
                });

            modelBuilder.Entity("Data.Models.PositionRule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("MinimumCorrectionPercent")
                        .HasColumnType("integer");

                    b.Property<int>("PositionManagementId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int>("TimeFrame")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PositionManagementId");

                    b.ToTable("PositionRules", (string)null);
                });

            modelBuilder.Entity("Data.Models.PositionScaling", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("EquityPercentage")
                        .HasColumnType("numeric");

                    b.Property<int>("PositionManagementId")
                        .HasColumnType("integer");

                    b.Property<int>("PositionType")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PositionManagementId");

                    b.ToTable("PositionScalings", (string)null);
                });

            modelBuilder.Entity("Data.Models.PurchaseLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AverageLevel")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Level")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("PurchaseLevel", (string)null);
                });

            modelBuilder.Entity("Data.Models.RiskManagement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BaseRiskPercentage")
                        .HasColumnType("numeric");

                    b.Property<int?>("HedgeId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RiskToRewardRatio")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("HedgeId");

                    b.ToTable("RiskManagements", (string)null);
                });

            modelBuilder.Entity("Data.Models.SalesLevels", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AssetId")
                        .HasColumnType("integer");

                    b.Property<decimal?>("AverageLevel")
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("Level")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("SalesLevels", (string)null);
                });

            modelBuilder.Entity("Data.Models.Seasonality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndSeason")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartSeason")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Seasonalities", (string)null);
                });

            modelBuilder.Entity("Data.Models.SectorHedge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("HedgeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HedgeId");

                    b.ToTable("SectorHedge");
                });

            modelBuilder.Entity("Data.Models.StockMetrics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DebtRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DebtToEquityRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("DividendYield")
                        .HasColumnType("numeric");

                    b.Property<decimal>("EBIT")
                        .HasColumnType("numeric");

                    b.Property<int>("FinanceDataId")
                        .HasColumnType("integer");

                    b.Property<decimal>("FreeCashFlow")
                        .HasColumnType("numeric");

                    b.Property<decimal>("FreeCashFlowPerShare")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NetIncome")
                        .HasColumnType("numeric");

                    b.Property<decimal>("NetProfitMargin")
                        .HasColumnType("numeric");

                    b.Property<decimal>("OperatingCashFlowPerShare")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PBRatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PERatio")
                        .HasColumnType("numeric");

                    b.Property<decimal>("PSRatio")
                        .HasColumnType("numeric");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("ROA")
                        .HasColumnType("numeric");

                    b.Property<decimal>("ROE")
                        .HasColumnType("numeric");

                    b.Property<decimal>("RevenueGrowth")
                        .HasColumnType("numeric");

                    b.Property<decimal>("SharesOutstanding")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("FinanceDataId")
                        .IsUnique();

                    b.ToTable("StockMetrics", (string)null);
                });

            modelBuilder.Entity("Data.Modelsl.Strategy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("MacroeconomicEventId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PositionManagementId")
                        .HasColumnType("integer");

                    b.Property<Guid>("PublicId")
                        .HasColumnType("uuid");

                    b.Property<int?>("RiskManagementId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("MacroeconomicEventId");

                    b.HasIndex("PositionManagementId");

                    b.HasIndex("RiskManagementId");

                    b.ToTable("Strategies", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StrategyMacroeconomicEvent", b =>
                {
                    b.Property<int>("StrategyId")
                        .HasColumnType("integer");

                    b.Property<int>("MacroeconomicEventId")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.HasKey("StrategyId", "MacroeconomicEventId");

                    b.HasIndex("MacroeconomicEventId");

                    b.ToTable("StrategyMacroeconomicEvents", (string)null);
                });

            modelBuilder.Entity("Data.Models.Asset", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("Assets")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Models.InvestmentIdea", "InvestmentIdea")
                        .WithMany("Assets")
                        .HasForeignKey("InvestmentIdeaId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Data.Models.Seasonality", "Seasonalities")
                        .WithMany()
                        .HasForeignKey("SeasonalityId");

                    b.HasOne("Data.Modelsl.Strategy", "Strategy")
                        .WithMany("Assets")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("AppUser");

                    b.Navigation("InvestmentIdea");

                    b.Navigation("Seasonalities");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Data.Models.AssetHistory", b =>
                {
                    b.HasOne("Data.Models.Asset", "Asset")
                        .WithMany("AssetHistories")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Data.Models.BalanceFlow", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("BalanceFlows")
                        .HasForeignKey("AppUserId");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Data.Models.Chart", b =>
                {
                    b.HasOne("Data.Models.PositionEntryNote", "PositionEntryNote")
                        .WithMany("Charts")
                        .HasForeignKey("PositionEntryNoteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("PositionEntryNote");
                });

            modelBuilder.Entity("Data.Models.CryptoMetrics", b =>
                {
                    b.HasOne("Data.Models.FinanceData", "FinanceData")
                        .WithOne("CryptoMetrics")
                        .HasForeignKey("Data.Models.CryptoMetrics", "FinanceDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinanceData");
                });

            modelBuilder.Entity("Data.Models.Diversification", b =>
                {
                    b.HasOne("Data.Models.RiskManagement", "RiskManagement")
                        .WithMany("Diversification")
                        .HasForeignKey("RiskManagementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RiskManagement");
                });

            modelBuilder.Entity("Data.Models.FinanceData", b =>
                {
                    b.HasOne("Data.Modelsl.Strategy", "Strategy")
                        .WithMany()
                        .HasForeignKey("StrategyId");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Data.Models.Futures", b =>
                {
                    b.HasOne("Data.Models.Hedge", "Hadge")
                        .WithMany("Futures")
                        .HasForeignKey("HedgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hadge");
                });

            modelBuilder.Entity("Data.Models.InvestmentIdea", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("InvestmentIdeas")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Data.Models.MacroeconomicAnalysis", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("MacroeconomicAnalyses")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("Data.Models.MacroeconomicEvent", b =>
                {
                    b.HasOne("Data.Models.MacroeconomicAnalysis", "MacroeconomicAnalyses")
                        .WithMany("MacroeconomicEvents")
                        .HasForeignKey("MacroeconomicAnalysisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MacroeconomicAnalyses");
                });

            modelBuilder.Entity("Data.Models.Option", b =>
                {
                    b.HasOne("Data.Models.Hedge", "Hadge")
                        .WithMany("Options")
                        .HasForeignKey("HedgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hadge");
                });

            modelBuilder.Entity("Data.Models.PositionEntryNote", b =>
                {
                    b.HasOne("Data.Models.Asset", "Asset")
                        .WithMany("PositionEntryNotes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Data.Models.PositionRule", b =>
                {
                    b.HasOne("Data.Models.PositionManagement", "PositionManagement")
                        .WithMany("PositionRules")
                        .HasForeignKey("PositionManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionManagement");
                });

            modelBuilder.Entity("Data.Models.PositionScaling", b =>
                {
                    b.HasOne("Data.Models.PositionManagement", "PositionManagement")
                        .WithMany("PositionScalings")
                        .HasForeignKey("PositionManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionManagement");
                });

            modelBuilder.Entity("Data.Models.PurchaseLevel", b =>
                {
                    b.HasOne("Data.Models.Asset", "Asset")
                        .WithMany("PurchaseLevels")
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Data.Models.RiskManagement", b =>
                {
                    b.HasOne("Data.Models.Hedge", "Hedge")
                        .WithMany()
                        .HasForeignKey("HedgeId");

                    b.Navigation("Hedge");
                });

            modelBuilder.Entity("Data.Models.SalesLevels", b =>
                {
                    b.HasOne("Data.Models.Asset", "Asset")
                        .WithMany("SalesLevels")
                        .HasForeignKey("AssetId");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("Data.Models.SectorHedge", b =>
                {
                    b.HasOne("Data.Models.Hedge", "Hadge")
                        .WithMany("SectorHedges")
                        .HasForeignKey("HedgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hadge");
                });

            modelBuilder.Entity("Data.Models.StockMetrics", b =>
                {
                    b.HasOne("Data.Models.FinanceData", "FinanceData")
                        .WithOne("StockMetrics")
                        .HasForeignKey("Data.Models.StockMetrics", "FinanceDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FinanceData");
                });

            modelBuilder.Entity("Data.Modelsl.Strategy", b =>
                {
                    b.HasOne("Data.Models.AppUser", "AppUser")
                        .WithMany("Strategies")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.MacroeconomicEvent", null)
                        .WithMany("Strategies")
                        .HasForeignKey("MacroeconomicEventId");

                    b.HasOne("Data.Models.PositionManagement", "PositionManagement")
                        .WithMany()
                        .HasForeignKey("PositionManagementId");

                    b.HasOne("Data.Models.RiskManagement", "RiskManagement")
                        .WithMany()
                        .HasForeignKey("RiskManagementId");

                    b.Navigation("AppUser");

                    b.Navigation("PositionManagement");

                    b.Navigation("RiskManagement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Data.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StrategyMacroeconomicEvent", b =>
                {
                    b.HasOne("Data.Models.MacroeconomicEvent", "MacroeconomicEvent")
                        .WithMany("StrategyMacroeconomicEvents")
                        .HasForeignKey("MacroeconomicEventId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Data.Modelsl.Strategy", "Strategy")
                        .WithMany("StrategyMacroeconomicEvents")
                        .HasForeignKey("StrategyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MacroeconomicEvent");

                    b.Navigation("Strategy");
                });

            modelBuilder.Entity("Data.Models.AppUser", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("BalanceFlows");

                    b.Navigation("InvestmentIdeas");

                    b.Navigation("MacroeconomicAnalyses");

                    b.Navigation("Strategies");
                });

            modelBuilder.Entity("Data.Models.Asset", b =>
                {
                    b.Navigation("AssetHistories");

                    b.Navigation("PositionEntryNotes");

                    b.Navigation("PurchaseLevels");

                    b.Navigation("SalesLevels");
                });

            modelBuilder.Entity("Data.Models.FinanceData", b =>
                {
                    b.Navigation("CryptoMetrics");

                    b.Navigation("StockMetrics");
                });

            modelBuilder.Entity("Data.Models.Hedge", b =>
                {
                    b.Navigation("Futures");

                    b.Navigation("Options");

                    b.Navigation("SectorHedges");
                });

            modelBuilder.Entity("Data.Models.InvestmentIdea", b =>
                {
                    b.Navigation("Assets");
                });

            modelBuilder.Entity("Data.Models.MacroeconomicAnalysis", b =>
                {
                    b.Navigation("MacroeconomicEvents");
                });

            modelBuilder.Entity("Data.Models.MacroeconomicEvent", b =>
                {
                    b.Navigation("Strategies");

                    b.Navigation("StrategyMacroeconomicEvents");
                });

            modelBuilder.Entity("Data.Models.PositionEntryNote", b =>
                {
                    b.Navigation("Charts");
                });

            modelBuilder.Entity("Data.Models.PositionManagement", b =>
                {
                    b.Navigation("PositionRules");

                    b.Navigation("PositionScalings");
                });

            modelBuilder.Entity("Data.Models.RiskManagement", b =>
                {
                    b.Navigation("Diversification");
                });

            modelBuilder.Entity("Data.Modelsl.Strategy", b =>
                {
                    b.Navigation("Assets");

                    b.Navigation("StrategyMacroeconomicEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
